// _mixins.scss

// strip list styles

%no-list {
    margin-left: 0;
    padding-left: 0;
    list-style: none;
}

// Building helpers

%no-margin {
    margin: 0;
}

%no-padding {
    padding: 0;
}

%no-margin-padding {
    @extend %no-margin;

    @extend %no-padding;
}

%link-border {
    border: solid $link-border-width transparent;
}

// Layout

@mixin tablet {
    @media (min-width: #{$screen-tablet}) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: #{$screen-desktop}) {
        @content;
    }
}

@mixin desktop-lg {
    @media (min-width: #{$screen-desktop-lg}) {
        @content;
    }
}

@mixin mobile-sm-only {
    @media (max-width: #{$screen-mobile}) {
        @content;
    }
}

@mixin mobile-only {
    @media (max-width: #{$screen-tablet}) {
        @content;
    }
}

@mixin tablet-only {
    @media (min-width: #{$screen-tablet}) and (max-width: #{$screen-desktop}) {
        @content;
    }
}

@mixin desktop-only {
    @media (min-width: #{$screen-desktop}) and (max-width: #{$screen-desktop-lg}) {
        @content;
    }
}

@mixin desktop-up {
    @media (min-width: #{$screen-desktop}) {
        @content;
    }
}

@mixin print {
    @media print {
        @content;
    }
}

// auto-generate Flexbox classes to quickly reset widths

@mixin col-x-loop {
    $breakpoint-names: sm md lg xl;
    $columns: 12;

    @each $breakpoint in $breakpoint-names {
        .col-#{$breakpoint} {
            @for $i from 1 through $columns {
                &-#{$i} {
                    width: 100% $imp;
                }
            }
        }
    }
}

@mixin ie {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }
}

// Colours

// Allow generation of opaque backgrounds from hex values:
// https://stackoverflow.com/questions/10929458/sass-converting-hex-to-rgba-for-background-opacity
@mixin bg-opacity($color, $opacity: 0.3) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}

// Gradients

%light-blue-top-to-dark-blue-bottom {
    background: $primary-blue-light;
    background: -moz-linear-gradient(top, $primary-blue-light 0%, $navy 100%);
    background: -webkit-gradient(left top, left bottom, color-stop(0%, $primary-blue-light), color-stop(100%, $navy));
    background: -webkit-linear-gradient(top, $primary-blue-light 0%, $navy 100%);
    background: -o-linear-gradient(top, $primary-blue-light 0%, $navy 100%);
    background: -ms-linear-gradient(top, $primary-blue-light 0%, $navy 100%);
    background: linear-gradient(to bottom, $primary-blue-light 0%, $navy 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$primary-blue-light', endColorstr='$navy', GradientType=0 );
}

%dark-blue-top-to-light-blue-bottom {
    background: $navy;
    background: -moz-linear-gradient(top, $navy 0%, $primary-blue-light 100%);
    background: -webkit-gradient(left top, left bottom, color-stop(0%, $navy), color-stop(100%, $primary-blue-light));
    background: -webkit-linear-gradient(top, $navy 0%, $primary-blue-light 100%);
    background: -o-linear-gradient(top, $navy 0%, $primary-blue-light 100%);
    background: -ms-linear-gradient(top, $navy 0%, $primary-blue-light 100%);
    background: linear-gradient(to bottom, $navy 0%, $primary-blue-light 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$navy', endColorstr='$primary-blue-light', GradientType=0 );
}

%disable {
    background: $disabled-bg;
    color: $disabled-text;
}

%divider {
    min-height: 1px;
    margin: 1.25em 0;
    border-top: solid 1px $navy;
}